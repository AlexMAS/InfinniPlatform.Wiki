---
layout: default
title: IsContains
position: 9
categories: 
tags: 
---

<p>Объект равен заданному объекту.</p><p>&nbsp;</p><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">JSON Data Schema</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:plain-text-body><![CDATA[{
	"id": "IsContains",
	"description": "Объект равен заданному объекту",
	"type": "object",
	"extends": {
		"$ref": "http://wiki.infinnity.lan:8081/display/MC/BaseValidationOperator"
	},
	"properties": {
		"Message": {
			"description": "Сообщение об ошибке",
			"type": "string"
		},
		"Property": {
			"description": "Наименование свойства",
			"type": "string"
		},
		"Value": {
			"description": "Значение оператора",
			"type": "string"
		}
	}
}]]></ac:plain-text-body></ac:structured-macro><p>&nbsp; &nbsp;</p><h4>Пример #1</h4><p>&nbsp;</p><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Expression Example</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:plain-text-body><![CDATA[(target != null && target.Contains("Abc")) ]]></ac:plain-text-body></ac:structured-macro><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">JSON Data Example</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:plain-text-body><![CDATA[{
	"Message": "Сообщение об ошибке, если условие не выполняется",
	"Value": "Abc"
}]]></ac:plain-text-body></ac:structured-macro><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Test Example</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:plain-text-body><![CDATA[// Given
var target1 = null;
var target2 = "Xyz";
var target3 = "Xyabcz";
var validator = new IsContains { Message = "Error", Value = "Abc" };
 
// When
string message1, message2, message3;
var result1 = validator.Validate(target1, out message1);
var result2 = validator.Validate(target2, out message2);
var result3 = validator.Validate(target3, out message3);
 
// Then
Assert.IsFalse(result1);
Assert.AreEqual("Error", message1);
Assert.IsFalse(result2);
Assert.AreEqual("Error", message2);
Assert.IsTrue(result3);
Assert.IsNull(message3);]]></ac:plain-text-body></ac:structured-macro><p>&nbsp; &nbsp;</p><h4>Пример #2</h4><p>&nbsp;</p><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Expression Example</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:plain-text-body><![CDATA[(target.Property1 != null && target.Property1.Contains("Abc")) ]]></ac:plain-text-body></ac:structured-macro><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">JSON Data Example</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:plain-text-body><![CDATA[{
	"Message": "Сообщение об ошибке, если условие не выполняется",
	"Property": "Property1",
	"Value": "Abc"
}]]></ac:plain-text-body></ac:structured-macro><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Test Example</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:plain-text-body><![CDATA[// Given
var target1 = new { Property1 = null };
var target2 = new { Property1 = "Xyz" };
var target3 = new { Property1 = "Xyabcz" };
var validator = new IsContains { Message = "Error", Property = "Property1", Value = "Abc" };
 
// When
string message1, message2, message3;
var result1 = validator.Validate(target1, out message1);
var result2 = validator.Validate(target2, out message2);
var result3 = validator.Validate(target3, out message3);
 
// Then
Assert.IsFalse(result1);
Assert.AreEqual("Error", message1);
Assert.IsFalse(result2);
Assert.AreEqual("Error", message2);
Assert.IsTrue(result3);
Assert.IsNull(message3);]]></ac:plain-text-body></ac:structured-macro><p>&nbsp;</p><p>&nbsp;</p>