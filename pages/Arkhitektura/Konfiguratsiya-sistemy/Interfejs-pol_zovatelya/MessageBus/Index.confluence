---
layout: default
title: MessageBus
position: 17
categories: 
tags: 
---

<p>Асинхронная шина сообщений представления.</p><p>&nbsp;</p><p>Асинхронная шина сообщений создается для каждого экземпляра представления (см. <ac:link><ri:page ri:content-title="View" /></ac:link>) и предоставляет инфраструктуру для обмена сообщениями (событиями) между различными элементами этого представления (как визуальными, так и не визуальными). Еще раз акцентирую внимание: во-первых, шина - асинхронная; во-вторых, создается для каждого экземпляра представления, а не для приложения в целом. Первое значит, что отправка сообщений осуществляется асинхронно, то есть отправитель не дожидается момента окончания обработки сообщения. Второе значит, что обмен сообщениями в рамках экземпляра одного представления никак не влияет на экземпляры других представлений. Ниже определен API шины сообщений.</p><p>&nbsp; &nbsp;</p><table><tbody><tr><th>Name</th><th>Description</th></tr><tr><td colspan="1"><span>Send(string messageType, any messageBody)</span></td><td colspan="1"><p>Отправляет сообщение синхронно:</p><ul><li>messageType - тип сообщения;</li><li>messageBody - тело сообщения.</li></ul></td></tr><tr><td colspan="1">SendAsync(string messageType, any messageBody)</td><td colspan="1"><p>Отправляет сообщение асинхронно:</p><ul><li>messageType - тип сообщения;</li><li>messageBody - тело сообщения.</li></ul></td></tr><tr><td colspan="1">Subscribe(string messageType, function&lt;any&gt; messageHandler)</td><td colspan="1"><p>Подписывает на сообщения:</p><ul><li>messageType - тип сообщения;</li><li>messageHandler - обработчик сообщения.</li></ul></td></tr></tbody></table><p>&nbsp;</p><p>Каждый элемент представления (как визуальный, так и не визуальный) может выступать в качестве источника и/или в качестве подписчика на сообщения. Когда именно&nbsp;элемент будет осуществлять отправку сообщений, зависит от логики работы самого элемента. Когда именно элемент обработает поступившее сообщение, также зависит от элемента. Иначе говоря, момент отправки и момент окончания обработки сообщения в общем случае не детерминирован (возможно, сообщение никогда не будет отправлено; возможно, сообщение никогда не будет обработано), единственное, что гарантирует шина сообщений - доставку сообщения от источника всем существующим подписчикам.</p><p>&nbsp;</p><p>Для отправки сообщения необходимо вызвать метод&nbsp;<span>SendAsync() и передать два параметра: тип сообщения (<span>messageType</span>) и тело сообщения (<span>messageBody</span>). Получив такой запрос, шина сообщений осуществляет поиск всех подписчиков, заинтересованных в получении сообщения с заданным типом (messageType), после чего вызывает соответствующие обработчики сообщений, передавая в каждый из них указанное тело сообщения (messageBody). Для подписки на сообщение необходимо вызвать метод&nbsp;<span>Subscribe() и передать два параметра: тип сообщения (messageType) и указатель на функцию обработки сообщения (<span>messageHandler</span>). При появлении сообщения с заданным типом (messageType)&nbsp;шина сообщений вызовет данный обработчик сообщения, передав ему тело сообщения. Естественно, что каждому типу сообщения (messageType) жестко соответствует определенная структура тела сообщения&nbsp;(<span>messageBody</span>) - см. разделы <ac:link><ri:page ri:content-title="MessageType" /></ac:link> и&nbsp;<ac:link><ri:page ri:content-title="MessageBody" /></ac:link>.&nbsp;</span></span>В общем случае порядок регистрации обработчиков сообщений никак не связан с порядком их выполнения. Последнее значит, что между обработчиками сообщений не должно быть функциональной зависимости.</p><p>&nbsp;</p><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Examples</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:plain-text-body><![CDATA[View currentView;
 
// Получение ссылки на шину сообщений текущего представления
var exchange = currentView.GetExchange();
 
// Подписка на сообщение с типом Event1
exchange.Subscribe("Event1", function(messageBody) {
	alert("Event1: " + messageBody.Value);
});
 
// Публикация сообщения с типом Event1
exchange.SendAsync("Event1", { Value: 123 });]]></ac:plain-text-body></ac:structured-macro><p>&nbsp;</p><p>&nbsp;</p>