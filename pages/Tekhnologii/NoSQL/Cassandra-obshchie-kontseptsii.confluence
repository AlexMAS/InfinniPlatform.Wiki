---
layout: default
title: Cassandra: общие концепции
position: 1
categories: 
tags: 
---

<p>Производится обзорная характеристика возможностей <a href="http://cassandra.apache.org/">Cassandra</a>.</p><h1>Общие принципы</h1><p>Есть несколько базовых элементов, которые следует рассмотреть в самом начале:</p><ul><li>Keyspace - пространство ключей (аналог базы данных в RDBMS)</li><li>ColumnFamily - семейство колонок (аналог таблицы&nbsp;в RDBMS)</li><li>Column - колонка (аналог колонки таблицы в RDBMS)</li><li>Row - строка (аналог строки таблицы в&nbsp;RDBMS)</li></ul><p>Связь между этими элементами следующая:</p><ul><li>Keyspace состоит из множества&nbsp;ColumnFamily</li><li>ColumnFamily состоит из множества Row</li><li>Row состоит из множества Column</li></ul><p>Колонки бывают трех типов:</p><ul><li>Column - &quot;обычные колонка&quot; представляет собой пару &quot;ключ - значение&quot;, где &quot;ключ&quot; - наименование обычной колонки, &quot;значение&quot; - значение колонки</li><li>Super Column <span style="color: rgb(255,0,0);">[obsolete]</span>&nbsp;- &quot;супер-колонка&quot; представляет собой пару &quot;ключ - набор обычных колонок&quot;, где &quot;ключ&quot; - наименование супер-колонки, &quot;набор обычных колонок&quot; - список &quot;обычных колонок&quot; (см. выше)</li><li>Composite Type Column - &quot;композитная колонка&quot; представляет собой пару &quot;композитный ключ - значение&quot;, где &quot;композитный ключ&quot; - некоторый кортеж, уникально идентифицирующий колонку, &quot;значение&quot; - значение колонки</li></ul><ac:structured-macro ac:name="info"><ac:rich-text-body><p>Composite Type Column является альтернативой Super Column, которая работает значительно быстрей (до 3 раз - по некоторым неофициальным источникам) и предоставляет значительно больше гибкости при разработке модели данных.</p></ac:rich-text-body></ac:structured-macro><p>По аналогии, семейства колонок бывают трех типов:</p><ul><li>ColumnFamily -&nbsp;&quot;обычное семейство колонок&quot; представляет собой набор строк, которые могут содержать <strong>только</strong> &quot;обычные колонки&quot;</li><li>SuperColumnFamily&nbsp;<span style="color: rgb(255,0,0);">[obsolete]</span>&nbsp;- &quot;семейство супер-колонок&quot; представляет собой набор строк, которые могут содержать <strong>только</strong> &quot;супер-колонки&quot;</li><li>CompositeTypeColumnFamily - &quot;семейство композитных колонок&quot; представляет собой набор строк, которые могут содержать <strong>только</strong> &quot;композитные колонки&quot;</li></ul><p>Наконец, можно перечислить несколько основополагающих концепций:</p><ul><li>Полное отсутствие такого понятия, как &quot;схема данных&quot;, то есть каждая строчка одного семейства колонок может содержать разный набор колонок</li><li>В рамках одного семейства колонок может быть произвольное количество строк, в рамках одной строки - произвольное количество колонок</li><li>Все данные, а также наименование семейства колонок, колонок, строк представлены в бинарном виде, то есть каждый элемент хранится в виде массива байт</li><li>Из-за бинарного представления всех данных, в качестве наименования строк и колонок можно использовать все, что угодно - любой тип данных (числа, строки, даты и т.п.)</li></ul><p>Ниже приведена JSON-подобная структура, которая показывает соотношение между описанными выше элементами.</p><ac:structured-macro ac:name="code"><ac:parameter ac:name="language">javascript</ac:parameter><ac:plain-text-body><![CDATA[Keyspace:
   {
      ColumnFamily:
         [
            Row: { Column: Value, Column: Value, ... },
            Row: { Column: Value, Column: Value, ... },
            ...
         ],
      SuperColumnFamily:
         [
            Row: { SuperColumn: { Column: Value, Column: Value, ... }, ... },
            Row: { SuperColumn: { Column: Value, Column: Value, ... }, ... },
            ...
         ],
      CompositeTypeColumnFamily:
         [
            Row: { (Column, Column, ...): Value, (Column, Column, ...): Value, ... },
            Row: { (Column, Column, ...): Value, (Column, Column, ...): Value, ... },
            ...
         ],
      ...
   }]]></ac:plain-text-body></ac:structured-macro><ac:structured-macro ac:name="info"><ac:rich-text-body><p>Обращаю внимание, что приведенное JSON-подобное описание приведено только для удобства восприятия информации, данные в Cassandra хранятся в бинарном формате.</p></ac:rich-text-body></ac:structured-macro><p>Также следует обозначить следующие важные моменты:</p><ul><li>Децентрализованное хранение данных - возможность горизонтального масштабирования путем <strong>простого</strong> добавления новых узлов в кластер</li><li>Повышенная отказоустойчивость - каждая запись дублируется на нескольких узлах кластера</li><li>Высокая скорость чтения и записи (при этом скорость записи в несколько раз выше)</li><li><span style="font-size: 10.0pt;line-height: 13.0pt;">Высокая пропускная способность -&nbsp;пропускная способность чтения и записи увеличиваются <strong>линейно</strong> с добавлением новых узлов</span></li><li><span style="font-size: 10.0pt;line-height: 13.0pt;">Гибкая модель данных - отсутствие жесткой схемы данных</span></li><li>Безразмерное хранилище -&nbsp;<span style="color: rgb(0,0,0);">нет ограничений на объем</span></li><li><span style="color: rgb(0,0,0);">Доступ к записям по ключу - сложность выборки всегда O(1)</span></li></ul><p>Учитывая эти моменты есть некоторые особенности в работе, например:</p><ul><li><span style="color: rgb(0,0,0);">Данные сортируются, как только вы запишете их в кластер и <strong>всегда</strong> остаются отсортированными (для повышения производительности при чтении).</span></li><li><span style="color: rgb(0,0,0);">Столбцы внутри строк <strong>всегда</strong> отсортированы по имени столбца (как именно будут сравниваться имена при сортировки зависит от настроек семейства колонок, указанных при ее создании)</span></li></ul><p>&nbsp;</p><ac:structured-macro ac:name="note"><ac:rich-text-body><p><span style="color: rgb(0,0,0);">Все эти моменты следует учитывать при проектировании системы, чтобы принятая модель данных наилучшим образом соответствовала сценариям доступа к данным.</span></p></ac:rich-text-body></ac:structured-macro><h1>Распределение данных</h1><p><span style="color: rgb(0,0,0);">Cassandra </span>позволяет задавать стратегию распределения данных:</p><ul><li>Random partitioner - &quot;случайный разметчик&quot;&nbsp;распределяет данные в зависимости от md5 значения ключа.&nbsp;Даёт больше преимуществ, так как не нужно заботиться о равномерном распределение данных между серверами и подобных проблемах.</li><li>Byte-ordered partitioner -&nbsp;&quot;порядковый разметчик&quot;&nbsp;учитывает само битовое представление ключа.&nbsp;Используют в редких случаях, например если необходимы интервальные запросы (range scan).</li></ul><p>Важно заметить, что выбор стратегии производится <strong>перед созданием кластера</strong> и фактически не может быть изменён без полной перезагрузки данных.</p><p>Для распределения данных Cassandra&nbsp;использует технику, известную как <strong>согласованное хеширование</strong> (consistent hashing). Этот подход позволяет распределить данные между узлами и сделать так, что при добавлении и удалении нового узла количество пересылаемых данных было небольшим. Для этого каждому узлу ставится в соответствие метка (token), которая разбивает на части множество всех md5 значений ключей. Так как в большинстве случаев используется &quot;случайный разметчик&quot;, рассмотрим его. Для определения в каких узлах будут храниться данные, просто перебираются все метки узлов от меньшего к большему, и, когда значение метки становится больше, чем значение md5 ключа, то этот узел вместе с некоторым количеством последующих узлов (в порядке меток) выбирается для сохранения. Общее число выбранных узлов должно быть равным <strong>уровню репликации</strong> (replication factor). Уровень репликации задаётся для каждого пространства ключей и позволяет регулировать избыточность данных (data redundancy).&nbsp;Перед тем, как добавить узел в кластер, необходимо задать ему метку. От того, какой процент ключей покрывает промежуток между этой меткой и следующей, зависит сколько данных будет храниться на узле. Весь набор меток для кластера называется кольцом (ring).</p><h1>Согласованность данных</h1><p><span style="font-size: 10.0pt;line-height: 13.0pt;">&nbsp;</span></p><p>Узлы кластера <span style="color: rgb(0,0,0);">Cassandra&nbsp;</span><strong>равноценны</strong>, и клиенты могут соединятся с <strong>любым</strong> из них, как для записи, так и для чтения. Запросы проходят стадию координации, во время которой, выяснив при помощи ключа и разметчика на каких узлах должны располагаться данные, сервер посылает запросы к этим узлам. Будем называть узел, который выполняет координацию &mdash; <strong>координатором</strong> (coordinator), а узлы, которые выбраны для сохранения записи с данным ключом &mdash; <strong>узлами-реплик</strong> (replica nodes). Физически координатором может быть один из узлов-реплик &mdash; это зависит только от ключа, разметчика и меток.&nbsp;<span style="font-size: 10.0pt;line-height: 13.0pt;">Для каждого запроса, как на чтение, так и на запись, есть возможность задать <strong>уровень согласованности данных</strong>.&nbsp;Для записи этот уровень будет влиять на количество узлов-реплик, с которых будет ожидаться подтверждение удачного окончания операции (данные записались) перед тем, как вернуть пользователю управление.&nbsp;Для чтения уровень согласованности будет влиять на количество узлов-реплик, с которых будет производиться чтение.&nbsp;Таким образом, можно регулировать временные задержки операций чтения, записи и настраивать согласованность, а также доступность (availability) каждой из видов операций.</span></p><h1>Восстановление данных</h1><p><span style="color: rgb(0,0,0);">Cassandra поддерживает три механизма восстановления данных:</span></p><ul><li><span style="color: rgb(0,0,0);">Чтение с восстановлением (read repair). В<span style="color: rgb(0,0,0);">о время чтения данные запрашиваются со всех реплик и сравниваются уже после завершения координации. Та колонка, которая имеет последнюю метку времени, распространится на узлы, где метки устаревшие.</span></span></li><li><span style="color: rgb(0,0,0);">Ненаправленной отправки (hinted handoff).&nbsp;<span style="color: rgb(0,0,0);">Позволяет сохранить информацию об операции записи на координаторе в том случае, если запись на какой-либо из узлов не удалась. Позже, когда это будет возможно, запись повторится.</span></span></li><li><span style="color: rgb(0,0,0);">Анти-энтропийное восстановление узла (anti-entropy node repair).&nbsp;Процесс восстановления всех реплик, который должен запускаться регулярно вручную при помощи команды &quot;nodetool repair&quot; и позволяет поддержать количество реплик всех данных, которые возможно были не восстановлены первыми двумя способами, на требуемом уровне репликации.</span></li></ul><h1><span style="color: rgb(0,0,0);">Запись данных</span></h1><div><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,0);">&nbsp;</span></span><p>Когда данные приходят после координации на узел непосредственно для записи, то они попадают в две структуры данных: в <strong>таблицу в памяти</strong> (memtable) и в <strong>журнал закрепления</strong> (commit log). Таблица в памяти существует для каждого семейства колонок и позволяет запомнить значение моментально. Технически это hash-таблица (hashmap) с возможностью одновременного доступа (concurrent access) на основе структуры данных, называемой &quot;списками с пропусками&quot; (skip list). Журнал закрепления один на всё пространство ключей и сохраняется на диске. Журнал представляет собой последовательность операций модификации. Так же он разбивается на части при достижении определённого размера.</p><p><span style="font-size: 10.0pt;line-height: 13.0pt;">Для определения момента сохранения существует ограничение объёма занимаемыми таблицами в памяти (memtable_total_spacein_mb), по умолчанию это ⅓ максимального размера кучи Java (Java heapspace). При заполнении таблицами в памяти объёма больше чем это ограничение, <span style="color: rgb(0,0,0);">Cassandra</span>&nbsp;создает новую таблицу и записывает старую таблицу в памяти на диск в виде <strong>сохраненной таблицы</strong> (SSTable). Сохраненная таблица после создания больше никогда не модифицируется (is immutable). Когда происходит сохранение на диск, то части журнала закрепления помечаются как свободные, таким образом освобождая занятое журналом место на диске.</span></p><p><span style="font-size: 10.0pt;line-height: 13.0pt;">&nbsp;</span>Такая организация позволяет сделать скорость записи ограниченной скоростью последовательной записи на жесткий диск и при этом гарантировать долговечность данных (data durability). Журнал закрепления в случае аварийного останова узла читается при старте сервиса <span style="color: rgb(0,0,0);">Cassandra&nbsp;</span>и восстанавливает все таблицы в памяти. Получается, что скорость упирается во время последовательной записи на диск, а у современных жёстких дисков это порядка 100 Mb/sec. По этой причине журнал закрепления советуют вынести на отдельный дисковый носитель.</p><h1>Уплотнение данных</h1><p>Рано или поздно возникнет ситуация, когда в более старой сохраненной таблице и более новой будут содержаться старые и новые данные. Для того, чтобы гарантировать целостность, <span style="color: rgb(0,0,0);">Cassandra&nbsp;</span>обязана читать все эти сохраненные таблицы и выбирать данные с последней меткой времени. Получается, что количество операций позиционирования жесткого диска при чтении пропорционально количеству сохраненных таблиц. Поэтому для того, чтобы освободить перезаписанные данные и уменьшить количество сохраненных таблиц, существует <strong>процесс уплотнения</strong> (compaction). Он читает последовательно несколько сохраненных таблиц и записывает новую сохраненную таблицу, в которой объединены данные по меткам времени. Когда таблица полностью записана и введена в использование, <span style="color: rgb(0,0,0);">Cassandra&nbsp;</span>может освободить таблицы-источники (таблицами, которые ее образовали). Таким образом, если таблицы содержали перезаписанные данные, то эта избыточность устраняется. Понятно, что во время такой операции объем избыточности увеличивается - новая сохраненная таблица существует на диске вместе с таблицами-источниками, а это значит, что объем места на диске всегда должен быть такой, чтобы можно было произвести уплотнение.</p><h1>Удаление данных</h1><p>С точки зрения внутреннего устройства, операции удаление колонок - это операции записи специального значения - <strong>затирающего значения</strong> (tombstone). Когда такое значение получается в результате чтения, то оно пропускается, словно такого значения никогда и не существовало. В результате же уплотнения, такие значения постепенно вытесняют устаревшие реальные значения и, возможно, исчезают вовсе. Если же появятся колонки с реальными данными с еще более новыми метками времени, то они перетрут, в конце концов, и эти затирающие значения.</p><h1>Транзакционность</h1><p>Кассандра поддерживает транзакционность на уровне <strong>одной записи</strong> (Row), то есть для набора колонок с одним ключом.</p><h1>Язык запросов</h1><ul><li><strong>Thrift API</strong>&nbsp;- низкоуровневый бинарный язык запросов</li><li><strong style="font-size: 10.0pt;line-height: 13.0pt;">CQL</strong><span style="font-size: 10.0pt;line-height: 13.0pt;"> (Cassandra Query Language) - высокоуровневый SQL-подобный язык запросов к Cassandra</span></li></ul><div>На момент написания данной заметки была актуальна Cassandra 1.2 и CQL 3. В целом на этот момент официальные и не очень ресурсы сходятся в едином мнении - в новых разработках рекомендуется использовать CQL, а не Thrift.</div><blockquote><p><span>&quot;</span><span>CQL2 был представлен в Cassandra v0.8 и расширен в v1.0. Целью было предоставить SQL-подобный язык для Cassandra, который будет более расширяем, чем Thrift API. Однако CQL2 был очень близок к концепции Thrift. [...] Таким образом, мы вернулись к своим чертежам в Cassandra 1.1 и пересмотрели язык CQL, чтобы решить указанные проблемы.&quot; (<a href="http://www.datastax.com/dev/blog/cql3-for-cassandra-experts">CQL3 for Cassandra experts</a>)</span></p><p>&quot;Мы верим, что CQL3 более простой и всеобъемлющий API для Cassandra, нежели Thrift API. Поэтому в новых проектах рекомендуется использовать CQL3.&nbsp;[...] Как CQL3, так и Thrift использует один и тот же уровень хранения данных, поэтому все будущие усовершенствования этого уровня в одинаковой степени коснуться обоих.&quot; (<a href="http://www.datastax.com/dev/blog/thrift-to-cql3">A thrift to CQL3 upgrade guide</a>)</p><div>&quot;CQL (Cassandra Query Language) - относительно новый SQL-подобный синтаксис запросов к Apache&nbsp;Cassandra. Это удобный интерфейс доступа к Cassandra, являющийся альтернативой Thrift RPC, который, честно говоря, отстой.&quot; (<a href="http://www.acunu.com/2/post/2011/12/cql-benchmarking.html">Eric Evans</a>)&nbsp;[...] CQL предоставляет большую стабильность и простоту в использовании - два аспекта, за которые Cassandra справедливо критиковалась в прошлом. (<a href="http://www.acunu.com/2/post/2011/12/cql-benchmarking.html">CQL benchmarking</a>)</div></blockquote><div>Что касается производительности, то, судя по <a href="http://www.acunu.com/2/post/2011/12/cql-benchmarking.html">обзорам</a>, CQL не так сильно отстает от Thrift. Также можно привести достаточно хороший довод относительно производительности CQL:</div><blockquote><p>Одно из наиболее частых предположений относительно CQL заключается в том, что возникает необходимость делать разбор строки запроса, следовательно, он (CQL) работает хуже, чем Thrift RPC. Я часто предостерегаю людей от подобных заявлений и указываю на то, что это не строгая игра в показатели производительности. Время разработки является наиболее ценным ресурсом проекта, поэтому вполне достаточно, чтобы производительность была &quot;довольно хороша&quot;. [...] Подготовленные выражения (<a href="http://cassandra.apache.org/doc/cql3/CQL.html#preparedStatement">prepared statements</a>) позволяют делать разбор запроса только один раз и использовать его повторно.&nbsp;<span>(</span><a href="http://www.acunu.com/2/post/2011/12/cql-benchmarking.html">CQL benchmarking</a><span>)</span></p></blockquote><h1>Примеры на CQL</h1><ac:structured-macro ac:name="code"><ac:parameter ac:name="language">sql</ac:parameter><ac:plain-text-body><![CDATA[-- Создание пространства ключей с именем MultiCare (стратегия репликации - обычная, фактор репликации равен 3)
CREATE KEYSPACE MultiCare WITH replication = { 'class': 'SimpleStrategy', 'replication_factor' : 3 };
 
-- Изменение пространства ключей с именем MultiCare (фактор репликации изменился на 4)
ALTER KEYSPACE MultiCare WITH replication = { 'class': 'SimpleStrategy', 'replication_factor' : 4 };

-- Выбор пространства ключей с именем MultiCare в качестве текущего
USE MultiCare;
 
-- Создание семейства колонок с именем Patient
CREATE TABLE Patient (
   Id uuid PRIMARY KEY,
   FirstName text,
   MiddleName text,
   LastName text,
   BirthTime timestamp,
   IsDeceased boolean,
   DeceasedTime timestamp
)
WITH compaction = { 'class' : 'LeveledCompactionStrategy' };
 
-- Изменение семейства колонок с именем Patient (добавление колонки)
ALTER TABLE Patient ADD Sex int;
 
-- Изменение семейства колонок с именем Patient (изменение настроек)
ALTER TABLE Patient WITH compaction = { 'class' : 'LeveledCompactionStrategy' } AND comment = 'Personal patient data';
 
-- Создание индексов семейства колонок с именем Patient
CREATE INDEX PatientFirstNameIndex ON Patient(FirstName);
CREATE INDEX PatientMiddleNameIndex ON Patient(MiddleName);
CREATE INDEX PatientLastNameIndex ON Patient(LastName);
CREATE INDEX PatientBirthTimeIndex ON Patient(BirthTime);
 
-- Вставка строки в семейство колонок с именем Patient
INSERT INTO Patient(Id, FirstName, MiddleName, LastName) VALUES ('9789F3A8-CDA8-42F2-A066-DC2345F0B1B6', 'Иван', 'Иванович', 'Иванов');
 
-- Вставка строки в семейство колонок с именем Patient (на самом деле - обновление существующей строки)
INSERT INTO Patient(Id, Sex) VALUES ('9789F3A8-CDA8-42F2-A066-DC2345F0B1B6', 1);
 
-- Обновление строки семейства колонок с именем Patient
UPDATE Patient SET IsDeceased = false WHERE Id = '9789F3A8-CDA8-42F2-A066-DC2345F0B1B6'
 
-- Выборка данных из семейства колонок с именем Patient
SELECT * FROM Patient
SELECT * FROM Patient WHERE Id = '9789F3A8-CDA8-42F2-A066-DC2345F0B1B6'
SELECT Id, FirstName, MiddleName, LastName, BirthTime FROM Patient WHERE LastName = 'Иванов'
SELECT * FROM Patient WHERE LastName IN ('Иванов', 'Петров') LIMIT 20
SELECT COUNT(*) FROM Patient
 
-- Удаление колонки из строки семейства колонок с именем  Patient
DELETE IsDeceased FROM Patient WHERE Id = '9789F3A8-CDA8-42F2-A066-DC2345F0B1B6'
 
-- Удаление строки из семейства колонок с именем Patient
DELETE FROM Patient WHERE Id = '9789F3A8-CDA8-42F2-A066-DC2345F0B1B6'
 
-- Удаление индексов семейства колонок с именем Patient
DROP INDEX PatientFirstNameIndex;
DROP INDEX PatientMiddleNameIndex;
DROP INDEX PatientLastNameIndex;
DROP INDEX PatientBirthTimeIndex;


-- Удаление всех данных из семейства колонок с именем Patient
TRUNCATE Patient;


-- Удаление семейства колонок с именем Patient
DROP TABLE Patient;
 
-- Удаление пространства ключей с именем MultiCare
DROP KEYSPACE MultiCare;]]></ac:plain-text-body></ac:structured-macro><p>&nbsp;</p></div><h1>Несколько советов</h1><ul><li>На всех узлах всех дата-центров должно быть установлено одинаковое время и один часовой пояс, так как это влияет на репликацию.</li><li>По умолчанию поиск возможен только по ключам, для возможности поиска по колонкам, нужно создать индекс при создании семейства колонок.</li><li>Существует возможность автоматического добавления узла в кластер, однако нельзя использовать эту возможность&nbsp;в production-режиме. Токены узлов нужно рассчитывать вручную, чтобы нагрузка на узлы была сбалансирована.</li><li>Имеется механизм кэширования, значительно снижающий обращения к жёсткому диску. В настройках размер&nbsp;<span style="font-size: 10.0pt;line-height: 13.0pt;">кэша задаётся в &quot;записях&quot;, а не &quot;байтах&quot;, поэтому нужно быть осторожным, чтобы не получить &quot;Out Of Memory&quot;.</span></li><li><span style="font-size: 10.0pt;line-height: 13.0pt;">По мнению авторов управление узлами заключается в двух основных операциях: добавить узел, удалить узел. Если узел &quot;упал&quot; его нужно просто удалить; данные автоматически подтянутся с других узлов.</span></li><li>Минимально рекомендуемое количество узлов <span style="color: rgb(0,0,0);">равно 3&nbsp;</span>(так называемый&nbsp;<span style="color: rgb(0,0,0);">Replication Factor).&nbsp;Это объясняется тем, что в случае проблем и порчей информации на одном узле всё равно будет большинство узлов с корректной информацией.</span></li><li><span style="color: rgb(0,0,0);">После записи данные попадают в память узла (RAM) и CommitLog (HDD), поэтому лучше использовать узлы с двумя жесткими дисками (HDD), один из которых будет использоваться для&nbsp;<span style="color: rgb(0,0,0);">CommitLog, другой - для файлов данных.</span></span></li><li><span style="color: rgb(0,0,0);">Скорость чтения в конечном счете упирается в скорость случайного доступа к диску (HDD), если данные не умещаются целиком в памяти, и в скорость сети, если данные, необходимые для ответа на запрос, находятся на разных серверах.</span></li><li><span style="color: rgb(0,0,0);">Среди методов борьбы с задержками ответа на чтение - увеличение RAM (увеличение кэша), тщательное планирование расположения и схемы данных, запросов к базе.</span></li><li><span style="color: rgb(0,0,0);">Если дата-центры географически удалены, то вместо &quot;<span style="color: rgb(0,0,0);">Simple Strategy</span>&quot; рекомендуется использовать &quot;<span style="color: rgb(0,0,0);">Network Topology Strategy</span>&quot; (позволяет описать топологию кластера - в каком дата-центре, в какой стойке находится тот или иной узел).</span></li><li><span style="color: rgb(0,0,0);">Чтобы не устраивать DDoS на пока еще самый быстрый узел, рекомендуется организовать такую логику, при которой клиент последовательно обходит все рабочие узлы по кругу для равномерного распределения нагрузки (если узел долго не отвечает, он считается не рабочим).</span></li><li><span style="color: rgb(0,0,0);">Периодически рекомендуется выполнять процедуру <span style="color: rgb(0,0,0);">&quot;nodetool <span style="color: rgb(0,0,0);">compactions</span>&quot;</span>, которая выполняет уплотнение таблиц данных. Несмотря на то, что эта процедура выполняется автоматически, ее рекомендуют запускать для профилактики (особенно пред выполнением процедуры repair).</span></li><li><span style="color: rgb(0,0,0);">Периодически рекомендуется выполнять процедуру <span style="color: rgb(0,0,0);">&quot;nodetool repair&quot;</span>, которая выполняет синхронизацию данных между узлами и удаляет данные, которые были помечены, как удаленные. Однако нужно понимать, что это очень ресурсоемкая процедура, требующая хорошей связи между узлами.</span></li><li><span style="color: rgb(0,0,0);">Чтобы уменьшить влияние тяжелой процедуры&nbsp;<span style="color: rgb(0,0,0);">&quot;nodetool&nbsp;</span><span style="color: rgb(0,0,0);">compactions</span><span style="color: rgb(0,0,0);">&quot;</span><span style="color: rgb(0,0,0);">&nbsp;нужно подобрать оптимальную частоту выполнения этой процедуры (зависит от объема данных), количество параллельных потоков для слияния, а также допустимый дисковый трафик для этой операции.</span></span></li><li><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,0);">Рекомендуется обеспечить запас по месту и по скорости диска (HDD), по объему памяти (RAM), особенно если важно время ответа.</span></span></li><li><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,0);">Рекомендуется использовать одинаковое &quot;железо&quot; для всех узлов (так проще осуществлять балансировку нагрузки).</span></span></li><li><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,0);"><span style="color: rgb(0,0,0);">При проектировании подходить необходимо не со стороны отношений между сущностями или связями между объектами, а со стороны запросов (<span style="color: rgb(0,0,0);">лучше постараться сохранить в коночное семейство все, что может понадобиться для этого запроса</span>).</span></span></span></li></ul><h1><span style="color: rgb(0,0,0);">Установка</span></h1><p><span style="color: rgb(0,0,0);">Установить Cassandra можно &quot;вручную&quot;, как описано в <a href="http://wiki.apache.org/cassandra/GettingStarted">официальной документации</a>, либо воспользоваться <a href="http://www.datastax.com/documentation/gettingstarted/index.html?pagename=docs&amp;version=quick_start&amp;file=quickstart">установщиком от DataStax</a>.</span></p><h1>Дополнительная информация</h1><p><a href="http://cassandra.apache.org/">Cassandra</a>&nbsp;- официальный сайт</p><p><a href="http://wiki.apache.org/cassandra/API">Cassandra API</a>&nbsp;- официальная документация</p><p><span style="color: rgb(0,0,0);"><a href="http://www.datastax.com/docs">Документация на datastax.com</a> - документация сообщества&nbsp;<span style="color: rgb(0,0,0);">DataStax</span></span></p><p><span style="color: rgb(0,0,0);"><a href="http://planetcassandra.org/">Planet Cassandra</a>&nbsp;-&nbsp;DataStax Community Edition</span></p><p><a href="http://habrahabr.ru/post/100075/">WTF is a SuperColumn? Введение в модель данных Cassandra</a>&nbsp;- приводится подробнейшее описание модели данных</p><p><a href="http://habrahabr.ru/company/lifestreet/blog/146115/">Cassandra глазами Operations</a>&nbsp;- набор советов по администрированию и оптимальной настройке</p><p><a href="http://habrahabr.ru/post/114160/">Опыт спасения кластера Cassandra</a>&nbsp;- набор советов по замене узлов в кластере</p><p><a href="http://habrahabr.ru/post/155115/" style="font-size: 10.0pt;line-height: 13.0pt;">Как устроена Apache Cassandra</a><span style="font-size: 10.0pt;line-height: 13.0pt;"> - подробно рассматриваются принципы работы</span></p><p><a href="http://jeeconf.com/archive/jeeconf-2011/materials/cassandra/">Cassandra как распределенная NoSQL база данных</a> - видео-доклад о принципах работы</p><p><a href="http://www.acunu.com/2/post/2011/12/cql-benchmarking.html">CQL benchmarking</a> - сравнение производительности CQL и Thrift</p><p><a href="http://www.datastax.com/dev/blog/cql3-for-cassandra-experts">CQL3 for Cassandra experts</a><span>&nbsp;- рассматриваются возможности CQL3 и приводится практический пример создания программной модели</span></p><p><a href="http://coderjournal.com/2010/03/cassandra-jump-start-for-the-windows-developer/">Cassandra Jump Start For The Windows Developer</a> - описание процесса установки (немного устаревшее)</p><p>&nbsp;</p><p>&nbsp;</p>