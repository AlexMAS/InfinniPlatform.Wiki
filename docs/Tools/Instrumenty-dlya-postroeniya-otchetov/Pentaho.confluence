---
layout: default
title: "Pentaho"
position: 
categories: 
tags: 
---

<h4>Официальный сайт</h4><p><a href="http://www.pentaho.com/">http://www.pentaho.com/</a></p><h4>Версия на момент написания статьи</h4><p>5.0.1</p><p>&nbsp;</p><h4>Полная процедура создания отчета</h4><p>&nbsp;</p><ac:structured-macro ac:name="expand"><ac:parameter ac:name="title">1. Создание источника данных в &quot;Data Integration&quot; (&quot;Spoon&quot;).</ac:parameter><ac:rich-text-body><p>Для работы с нестандартными источниками данных (и для интеграции систем) в Pentaho используется подход, общее название которого - ETL (от англ. Extract, Transform, Load). ETL-модуль в Pentaho представлен в виде визуальной утилиты с говорящим названием &quot;<span style="color: rgb(0,0,0);">Data Integration</span>&quot; (в народе ее называют &quot;Spoon&quot;). Это достаточно мощный инструмент, поэтому в контексте данной статьи он рассматривался исключительно с точки зрения решаемой задачи: возможность подключения источника данных, представленного в виде REST-сервиса. Для решения этой задачи нужно создать так называемый &quot;Transformation&quot;. <span>Transformation - это файл, в котором пользователь должен определить этапы: <span>Extract (извлечение исходных данных из первичного источника), Transform (опционально; преобразование исходных данных в нужный формат), Load (опционально; загрузка преобразованных данных во вторичный источник). С помощью утилиты <span>&quot;</span><span style="color: rgb(0,0,0);">Data Integration</span><span>&quot; все эти этапы задаются визуально, в виде диаграммы, которая очень сильно напоминает диаграмму потока данных. Преимуществом ETL-модуля от Pentaho в том, что он поддерживает достаточно много различных источников (input) и приемников (output), а также различных трансформаций данных. Например, из популярных nosql-хранилищ: Cassandra, MongoDB, CouchDb, HBase. В целом, для начала работы с данным инструментом этой информации более, чем достаточно, поэтому на данном этапе проще перейти к практике и рассмотреть способ решения вышеуказанной задачи.</span></span></span></p><p><span><span><span><br /></span></span></span></p><p><span><span><span>Открываем <span>&quot;</span><span style="color: rgb(0,0,0);">Data Integration</span><span>&quot;, создаем </span>&quot;<span>Transformation&quot;, в котором рисуем нижеследующую диаграмму. Все компоненты, присутствующие на этой диаграмме можно найти на панели &quot;Design&quot; с одноименным названием. Стрелки между компонентами (потоки данных) можно расставить с использованием меню, которое появляется при наведении на соответствующий блок. Собственно эта диаграмма задает последовательность шагов для выборки данных из REST-сервиса и преобразования этих данных в реляционный вид, с которым может работать дизайнер отчетов.</span></span></span></span></p><p><span><span><span><span><ac:image><ri:attachment ri:filename="Diagram.PNG" /></ac:image></span></span></span></span></p><p><span><span><span><span><br /></span></span></span></span></p><p><span><span><span>Далее рассмотрим настройки каждого блока. Блок &quot;Get Variables&quot; задает входные параметры для нашего data flow. В нашем случае - это только URL REST-сервиса, к которому производится обращение. Эти входные параметры будут переданы следующему блоку, с которым установлена связь через стрелку, то есть блоку &quot;REST Client&quot;.</span></span></span></p><p><span><span><span><ac:image><ri:attachment ri:filename="GetVariables.png" /></ac:image><br /></span></span></span></p><p><span><span><span><br /></span></span></span></p><p>В блоке &quot;REST Client&quot; определяются настройки HTTP-запроса к REST-сервису. URL сервиса берется из параметра &quot;url&quot;, полученного на предыдущем шаге; HTTP-метод равен &quot;GET&quot;; а тип данных, который возвращает сервис равен &quot;JSON&quot;. После того, как этот блок отработает, он запишет полученный JSON в выходной параметр &quot;resultJson&quot;, который будет передан следующему блоку, с которым установлена связь через стрелку, то есть блоку &quot;Json Input&quot;.</p><p><ac:image><ri:attachment ri:filename="RestClient.png" /></ac:image></p><p><span><span><span><br /></span></span></span></p><p><span><span><span>Блок &quot;<span>Json Input</span>&quot;, по сути, задает объектно-реляционное преобразование, так как в нем определены правила того, как из исходного JSON-объекта получить результирующий набор полей (фактически колонок реляционной таблицы). Итак, на этом уровне в качестве источника JSON-файла указывается параметр &quot;resultJson&quot;, значение которого было получено на предыдущем шаге. Далее на вкладке &quot;Fields&quot; осуществляется настройка объектно-реляционного преобразования с использованием синтаксиса <a href="http://goessner.net/articles/JsonPath/">JSONPath</a>.</span></span></span></p><p><span><span><span><ac:image><ri:attachment ri:filename="JsonInput1.png" /></ac:image><br /></span></span></span></p><p><span><span><span><ac:image><ri:attachment ri:filename="JsonInput2.png" /></ac:image><br /></span></span></span></p><p>&nbsp;</p><p>Для задания правил объектно-реляционного преобразования, естественно, нужно знать схему исходного JSON-объекта. В качестве иллюстрации к данному примеру ниже приведена часть JSON-файла с данными.</p><p><ac:image><ri:attachment ri:filename="Json.png" /></ac:image></p><p><span><span><span><br /></span></span></span></p><p><span><span><span>Наконец, блок &quot;Select values&quot; определяет последний шаг, где мы можем указать дополнительную мета-информацию выбранного поля (тип данных, размер, кодировку, правила форматирования и т.п.), а также исключить или добавить поля, которые попадут или не попадут в результирующий набор. В рамках данного примера в результирующий набор просто <span>были </span>включены все поля.</span></span></span></p><p><span><span><span><ac:image><ri:attachment ri:filename="SelectValues.png" /></ac:image><br /></span></span></span></p><p><span><span><span><br /></span></span></span></p><p><span><span><span>Для проверки того, что трансформация работает правильно, нужно ее запустить (меню &quot;Action / Run&quot;) и посмотреть на вкладку &quot;Preview data&quot;. Если все нормально, данные будут выведены на экран, в противном случае будет выдано сообщение об ошибке, которое в 99% случаев совершенно не говорящее. В последнем случае приходится анализировать достаточно скупой вывод на вкладке &quot;Logging&quot;, либо воспользоваться меню &quot;Action / Verify&quot;.</span></span></span></p><p><span><span><span><ac:image><ri:attachment ri:filename="ExecutionResult.PNG" /></ac:image><br /></span></span></span></p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name="expand"><ac:parameter ac:name="title">2. Верстка отчета в &quot;Report Designer&quot; и подключение источника данных к отчету.</ac:parameter><ac:rich-text-body><p>На этом этапе все достаточно &quot;стандартно&quot;, как и в любой отчетной системе. Запускаем &quot;Report Designer&quot;, создаем новый отчет и начинаем верстку. Небольшая особенность заключена лишь в подключении источника данных, полученного на предыдущем этапе. Для этого нужно выбрать меню &quot;Data / Add Datasource / Pentaho Data Integration&quot;. В появившемся диалоге добавить внешний источник данных, указав путь к файлу с описанием трансформации из предыдущего этапа, а также выбрать шаг трансформации, который будет являться источником данных для отчета (в нашем случае таким шагом является блок &quot;Select values&quot;).</p><p><ac:image><ri:attachment ri:filename="AddDataSource.png" /></ac:image></p><p>&nbsp;</p><p>В итоге, на вкладке &quot;Data&quot; будет отображена структура источника данных.</p><p><ac:image><ri:attachment ri:filename="DataPanel.PNG" /></ac:image></p><p>&nbsp;</p><p>После добавления источника начинается обычная верстка, результат которой может выглядеть следующим образом.</p><p><ac:image><ri:attachment ri:filename="ReportDesigner.PNG" /></ac:image></p><p>&nbsp;</p><p>Для просмотра результата используется меню &quot;View / Preview&quot;.</p><p><ac:image><ri:attachment ri:filename="ReportPreview.PNG" /></ac:image></p><p>&nbsp;</p><ac:structured-macro ac:name="warning"><ac:parameter ac:name="title">Важно</ac:parameter><ac:rich-text-body><p><span>Предварительный просмотр <strong>кэширует данные</strong>, что может вызвать недоумение разработчика отчетов в случае, если он изменил данные в источнике, а в отчете они не отобразились. Для устранения этой проблемы следует делать очистку кэша через меню &quot;Clear Data Cache&quot;.</span></p></ac:rich-text-body></ac:structured-macro><p>&nbsp;</p><p>&nbsp;</p></ac:rich-text-body></ac:structured-macro><ac:structured-macro ac:name="expand"><ac:parameter ac:name="title">3. Публикация отчета на сервер.</ac:parameter><ac:rich-text-body><p>На последнем шаге отчет публикуется на сервере для того, чтобы он стал виден пользователям. Эта процедура также осуществляется из &quot;Report Designer&quot; путем вызова меню &quot;File / Publish...&quot;. В появившемся диалоге указывается URL сервера, куда осуществляется публикация и учетные данные пользователя. Pentaho имеет собственную подсистему безопасности, поэтому нужно указать учетную запись пользователя Pentaho.</p><p><ac:image><ri:attachment ri:filename="Publish1.png" /></ac:image></p><p><ac:image><ri:attachment ri:filename="Publish2.png" /></ac:image></p><p>&nbsp;</p><p>В итоге отчет будет доступен на сервере всем пользователям.</p><p><ac:image><ri:attachment ri:filename="ReportServer.png" /></ac:image></p></ac:rich-text-body></ac:structured-macro><p>&nbsp;</p><h4>Явно выраженные недостатки и возможные проблемы</h4><p>&nbsp;</p><p>Во-первых, сразу после установки Pentaho возникли проблемы с кодировкой данных (поддержкой кириллицы). Для устранения этой проблемы в настройках &quot;Data Integration&quot; и &quot;Report Designer&quot; нужно явно указать UTF-8. Для этого нужно немного изменить bat/sh-файлы, с помощью которых запускаются данные утилиты.</p><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">pentaho\design-tools\data-integration\Spoon.bat</ac:parameter><ac:parameter ac:name="language">bash</ac:parameter><ac:plain-text-body><![CDATA[if "%PENTAHO_DI_JAVA_OPTIONS%"=="" set PENTAHO_DI_JAVA_OPTIONS="-Xmx512m" "-XX:MaxPermSize=256m" "-Dfile.encoding=utf8"]]></ac:plain-text-body></ac:structured-macro><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">pentaho\design-tools\report-designer\report-designer.bat</ac:parameter><ac:parameter ac:name="language">bash</ac:parameter><ac:plain-text-body><![CDATA[set OPT="-XX:MaxPermSize=256m" "-Xmx512M" "-Dfile.encoding=utf8"]]></ac:plain-text-body></ac:structured-macro><p>&nbsp;</p><p>Во-вторых, наблюдались проблемы с конвертацией отчетов именно в PDF при использовании шрифтов по умолчанию. После того, как шрифт был изменен на &quot;Arial&quot; кириллица стала отображаться в PDF, но сам файл все равно открывается с нижеуказанной ошибкой, которая явно будет раздражать пользователя.</p><p><ac:image><ri:attachment ri:filename="AcrobatError1.png" /></ac:image></p><p>&nbsp;</p><p>При этом в свойствах PDF-файла указано на автоопределение кодировки с использованием механизма &quot;Identity-H&quot;, что, конечно, очень плохо, так как у конечного пользователя файл может быть отображен некорректно.</p><p><ac:image><ri:attachment ri:filename="AcrobatError2.png" /></ac:image></p><p>&nbsp;</p><p>В-третьих, отталкиваясь от личного опыта разработки отчетов, мне показалось, что сам по себе &quot;Report Designer&quot; очень неудобен для верстки отчетов. Простые вещи требуют очень много &quot;телодвижений&quot;. Сюда можно отнести и о<span style="background-color: transparent;line-height: 1.4285715;">чень высокий порог вхождения в плане освоения имеющегося инструментария.</span></p><p><span style="background-color: transparent;line-height: 1.4285715;"><br /></span></p><p><span style="background-color: transparent;line-height: 1.4285715;">В-четвертых, в той версии, которую я рассматривал, отсутствовал компонент для построения матричных отчетов (cross-tab/matrix). Возможно, я его не увидел, возможно этот вид отчетов строится с использованием других средств (например, через OLAP-компонент), но точно знаю, что до версии 3.5 (включительно) у них не было поддержки матриц. Только по этой причине Pentaho можно вычеркнуть из списка кандидатов.</span></p><p><span style="background-color: transparent;line-height: 1.4285715;"><br /></span></p><p><span style="background-color: transparent;line-height: 1.4285715;">В-пятых, при использовании не реляционных источников данных (например, таких, как REST), верстальщику отчетов придется &quot;вручную&quot; настраивать объектно-реляционное преобразование (&quot;Transformation&quot;), например, так, как описано выше. Это очень утомительное и долгое занятие. Конечно, источников данных будет не так много, и можно использовать предопределенные трансформации, но все равно неприятно.</span></p><p><span style="background-color: transparent;line-height: 1.4285715;"><br /></span></p><p><span style="background-color: transparent;line-height: 1.4285715;">В-шестых, у Pentaho есть механизм автоматического кэширования данных, который срабатывает абсолютно для всех отчетов. Следовательно, построение отчетов типа &quot;оперативный срез&quot; становится проблематичным. Полагаю, что есть какие-то дополнительные настройки этого механизма (на уровне настроек &quot;Transformation&quot;).</span></p>